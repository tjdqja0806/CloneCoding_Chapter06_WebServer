Entity Framework Data Modeling

데이터 모델링 3가지 방법
	- Convention(관례)
		* Id Or [Class]Id 는 Primary Key로 사용
			public class GameResult{
				public int Id { get; set;} => Primary Key
			}
	- Data Annotation(데이터 주석)
		* Attribute 이용
			[MaxLength(32)]
			public string UserName
	- Fluent API(직접 정의)
		* API를 이용해 직접 정의
			protected override void OnModelCreating(ModelBuilder builder){
				builder.Entity<GameResult>()
					.Property(x => x.UserName)
					.IsUnicode(false);
			}

 => ApplicationDbContect를 만들 떄 OnModelCreating 함수를 override 해서 사용

Data Modeling : Convention
	- Entity Class에 대한 관례
		- 정의 : EF가 참조하는 Class를 Entity Class라고 정의
		- Public 이어야 한다.
		- static 속성이면 안된다.
		- 생성자가 없거나, 인자 없는 생성자가 있어야 한다.
		- Id or [Class]Id 형태의 Property를 테이블의 Primary Key로 간주한다.
	- Column에 대한 관례
		- property의 이름이 테이블 column의 이름으로 사용
		- property의 타입을 해당하는 SQL 타입으로 변환
		- C#형식의 기본 nullable이 테이블 column nullable에 영향(column에서 nullable을 사용하려면 C#에서 nullable 형식으로 사용해야 한다, String형식을 null 비교가 가능함으로 자동으로 사용 가능)

Data Modeling : Data Annotation(Attribute)
	- Blazor의 Form 검증 때 사용한 모든 Annotation 다 등장한다
		ex) Required, MaxLength, ....

Data Modeling : Fluent API
	- Convention Or Data Annotation으로는 할 수 없는 나머지 케이스는 모두 처리 가능

DB에서 특정 부분 제거하기
	- C#에서 메모리로만 사용하고 싶거나 추가적인 정보를 기입할 때 사용
	- Data Annotation & Fluent API로 처리 가능
		[NotMapped]
		public int UserId { get; set; }

		builder.Entity<GameResult>().Ignore(g => g.Excluded);

DB Column의 Type, Size, Null 제어
	- Data Annotation & Fluent API로 처리 가능
	ex)
		Not Null, Set String Size, Set String Varchar, ....
		[Required], [MaxLength(123)], ....
		.IsRequired(), .HasMaxLength(123), .IsUnicode(false), ....

Table의 Primary Key 설정
	- Convention, Data Annotation, Fluent API 모두 가능
	- Id, [Class]Id 로 성절 가능
	- [Key] Attribute 사용
	- 복합 키 일경우 [Key], [Column(Order = 1)] 2가지 함께 사용
	- .HasKey 메소드 사용

Table Index 설정
	- Fluent API에서만 가능
	- .HasIndex 메소드 사용

Table Name
	- 3가지 모두 가능
	ex)
		public DbSet<GameResult> GameResults { get; set; }
		[Table("GameResultTable")]
		builder.Entity<GameResult>().ToTable("GameResultTable");

Column Name
	- 3가지 모두 가능
	ex)
		public int Id { get; set; } => 기본적으로 변수 이릉 = 컬럼 이름
		[Column("PlayGameDate")] public DateTime Date { get; set; } => 변경 가능
		.HasColumnName(컬럼 이름)

어떤 것을 사용해야 하는가
	- 기본 상태로 충분하다면 Convention 방식 사용
	- Annotation으로 가능하다면 무조건 사용
		=> Annotation은 후에 Blazor Form Validation 등 다른곳에서 재사용 가능
	- 위 2가지로 정말 안되는 경우에만 Fluent API 사용


Entity RelationShip Modeling

Relationship(관계)
	public class BooK{
		public int BoolId { get; set; } => Primary Key, Principal Key
		public string Title { get; set; } => Principal Key
		public string ISBN { get; set; } => Alternate Key
		pubilc ICollection<Review> Reviews { get; set; } => Navigation Property(다른 아이를 가리키고 있는 )
	}

	public class Review{
		public int ReviewId { get; set; }
		public int BoolId { get; set; } => Foreign Key
		public string Context { get; set; }
	}

데이터 관계 : Convention
	- DBContect에 있는 Entity Class Property를 일일이 확인해 관계 추론

데이터 관계 : Data Annotation
	- Attribute 사용
	- [ForeignKey(nameof(BookId))]

데이터 관계 : Fluent API
